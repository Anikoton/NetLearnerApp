@page "/learningresources"

@using NetLearner.SharedLib.Data
@using NetLearner.SharedLib.Models
@using NetLearner.SharedLib.Services
@inject ILearningResourceService service
@inject IJSRuntime jsRuntime

<h1>Learning Resources</h1>

<p>This is a list of Learning Resources!</p>

@if (learningResources == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Url</th>
                <th>Edit</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var learningResource in learningResources)
            {
                <tr>
                    <td>@learningResource.Name</td>
                    <td>
                        <a href="@learningResource.Url">@learningResource.Url</a>                       
                    </td>
                    <td><input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(learningResource))" data-toggle="modal" data-target="#taskModal" value="Edit" /></td>
                    <td><input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(learningResource))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" /></td>

                </tr>
            }
        </tbody>
    </table>
}
<div>
    <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Add Item" @onclick="(() => InitializeLearningResourceObject())" />
</div>

<ConfirmDialog OnClick="@Delete" />
<ResourceDetail LearningResourceObject=learningResourceObject
                 DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</ResourceDetail>

@code {
    List<LearningResource> learningResources;
    LearningResource learningResourceObject = new LearningResource();
    string customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        learningResources = await service.Get();
    }
    private void InitializeLearningResourceObject()
    {
        learningResourceObject = new LearningResource();
        customHeader = "Add New Item";
    }

    private async void DataChanged()
    {
        learningResources = await service.Get();
        StateHasChanged();
    }
    private void PrepareForEdit(LearningResource learningResource)
    {
        customHeader = "Edit Item";
        learningResourceObject = learningResource;
    }

    private void PrepareForDelete(LearningResource learningResource)
    {
        learningResourceObject = learningResource;
    }

    private async Task Delete()
    {
        var task = await service.Delete(learningResourceObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        learningResources = await service.Get();
        learningResourceObject = new LearningResource();
    }
}